/*
* Macros for runI and runII of the LHC
*/

!@require beta_beat.macros.madx

/*
* Defines runII(runII nominal), db5(runI nominal) and ats(runI ats) links.
*/
define_lhc_links(): macro = {
    System, "test -e runII || ln -ns /afs/cern.ch/eng/lhc/optics/runII/2015/ runII";
    System, "test -e db5   || ln -ns /afs/cern.ch/eng/lhc/optics/V6.503 db5";
    System, "test -e ats   || ln -ns /afs/cern.ch/eng/lhc/optics/ATS_V6.503 ats";
};


/*
* Sets the sequences as cycles at their injection point
*/
cycle_sequences(): macro = {
    seqedit, sequence=LHCB1;
    flatten;               
    cycle, start=MSIA.EXIT.B1;
    endedit;
    
    seqedit, sequence=LHCB2;
    flatten;
    cycle, start=MKI.A5R8.B2;
    endedit;
};


/*
* Define the default nominal beams for the LHC beam1 and beam2.
*/
define_nominal_beams(): macro = {
    beam, sequence=LHCB1, particle=proton, energy=450, kbunch=1, npart=1.15E11, bv=1;
    beam, sequence=LHCB2, particle=proton, energy=450, kbunch=1, npart=1.15E11, bv=-1;
};


/*
* Define the default nominal beams for the LHC for the given accelerator.
* @param accel: The name of the accelerator where to define the beam.
*/
define_nominal_beams_for(accel): macro = {
    beam, sequence=accel, particle=proton, energy=450, kbunch=1, npart=1.15E11, bv=1;
};


/*
* Sets the default crossing scheme
*/
set_default_crossing_scheme(): macro = {
    on_x1   := 0; on_x2   := 0; on_x5   := 0; on_x8   := 0;
    on_sep1 := 0; on_sep2 := 0; on_sep5 := 0; on_sep8 := 0;
    on_alice:= 0; on_lhcb := 0; on_a8 := 0; on_o8 := 0;
};


/*
* Performs the matching of the LHC tunes.
* @param qx: The horizontal tune to match to (with integer part).
* @param qy: The vertical tune to match to (with integer part).
* @param beam_number: The beam to use either 1 or 2.
*/
match_tunes(qx, qy, beam_number): macro = {
    match;
    vary, name=KQTD.Bbeam_number;
    vary, name=KQTF.Bbeam_number;
    constraint, range=#E, mux=qx, muy=qy;
    lmdif;
    endmatch;
};


/*
* Computes the twiss file affected by the AC dipole.
* @param natural_qx: Fractional part of the natural horizontal tune.
* @param natural_qy: Fractional part of the natural vertical tune.
* @param driven_qx: Fractional part of the driven horizontal tune.
* @param driven_qy: Fractional part of the driven vertical tune.
* @param beam_number: LHC beam number, either 1 or 2.
* @param output_file: path to the file to write, it has to be input in "" to
* preserve upper case characters.
* @param dpp: delta p / p to use in the twiss command.
*/
twiss_ac_dipole(natural_qx, natural_qy, driven_qx, driven_qy, beam_number, output_file, dpp): macro = {
    Qx = natural_qx;
    Qxd = driven_qx;
    
    Qy = natural_qy;
    Qyd = driven_qy;
    
    betxac=table(twiss, MKQA.6L4.Bbeam_number, BEAM, betx);
    betyac=table(twiss, MKQA.6L4.Bbeam_number, BEAM, bety);

    hacmap21=2*(cos(2*pi*Qxd)-cos(2*pi*Qx))/(betxac*sin(2*pi*Qx));
    vacmap43=2*(cos(2*pi*Qyd)-cos(2*pi*Qy))/(betyac*sin(2*pi*Qy));
    
    hacmap: matrix, l=0, rm21=hacmap21;
    vacmap: matrix, l=0, rm43=vacmap43;
    
    seqedit, sequence=LHCBbeam_number;
        flatten;
        install, element=hacmap, at=1.583/2, from=MKQA.6L4.Bbeam_number;
        install, element=vacmap, at=1.583/2, from=MKQA.6L4.Bbeam_number;
    endedit;
    
    use, period=LHCBbeam_number;
    exec, do_twiss_monitors(LHCBbeam_number, output_file, dpp);
};


/* Fully defines the nominal LHC sequence. This macro should only be used after
* loading lhc_runii.macros.madx or lhc_runi.macros.madx.
* @param modifiers_path: Modifiers file to use, should contain at least the
* injection settings.
* @param beam_number: The beam to use either 1 or 2.
*/
full_lhc_def(modifiers_path, beam_number): macro = {
    exec, define_lhc_links();
    exec, load_main_sequence();
    call, file = modifiers_path;
    exec, cycle_sequences();
    exec, define_nominal_beams();
    exec, set_default_crossing_scheme();
    use, period = LHCBbeam_number;
};


/*
* Runs a full twiss command for the LHC. This macro should only be used after
* loading lhc_runii.macros.madx or lhc_runi.macros.madx.
* @param modifiers_path: Modifiers file to use, should contain at least the
* injection settings.
* @param beam_number: The beam to use either 1 or 2.
* @param qx: The horizontal tune to match to (with integer part).
* @param qy: The vertical tune to match to (with integer part).
* @param dpp: Delta p / p to use in the twiss command.
* @param monitors_output_file: path to the monitors only file to write, it 
* has to be input in "" to preserve upper case characters.
* @param elements_output_file: path to the all elements file to write, it 
* has to be input in "" to preserve upper case characters.
*/
full_lhc_twiss(modifiers_path, beam_number, qx, qy, dpp,
               monitors_file, elements_file): macro = {
    exec, full_lhc_def(modifiers_path, beam_number, qx, qy, dpp);
    exec, match_tunes(qx, qy, beam_number);
    exec, do_twiss_monitors(LHCBbeam_number, monitors_file, dpp);
    exec, do_twiss_elements(LHCBbeam_number, elements_file, dpp);
};


/*
* Same as full_lhc_twiss but with AC dipole active.
* NOTE: Sorry for the naming here, but MADX seems to have some
* kind of limit on the total length of the parameters (weird,
* probably Fortran related).
* @param m_p: Modifiers file to use, should contain at least the
* injection settings.
* @param b_num: The beam to use either 1 or 2.
* @param qx: The horizontal tune to match to (with integer part).
* @param qy: The vertical tune to match to (with integer part).
* @param q_nx: Fractional part of the natural horizontal tune.
* @param q_ny: Fractional part of the natural vertical tune.
* @param q_dx: Fractional part of the driven horizontal tune.
* @param q_dy: Fractional part of the driven vertical tune.
* @param dpp: Delta p / p to use in the twiss command.
* @param m_f: path to the monitors only file to write, it 
* has to be input in "" to preserve upper case characters.
* @param e_f: path to the all elements file to write, it 
* has to be input in "" to preserve upper case characters.
* @param a_f: path to the AC dipole file to write, it 
* has to be input in "" to preserve upper case characters.
*/
full_lhc_twiss_ac(m_p, b_num, qx, qy, q_nx, q_ny, q_dx, q_dy, dpp, m_f, e_f, a_f): macro = {
    exec, full_lhc_twiss(m_p, b_num, qx, qy, dpp, m_f, e_f);
    exec, twiss_ac_dipole(q_nx, q_ny, q_dx, q_dy, b_num, a_f, dpp);
};


/*
* TODO: Documentation for this
* @param energy: The energy to be used.
* @param beam_number: The beam to use either 1 or 2.
* @param error_num: The number of the error table to load, has to be a 4 digits number (e.g. 0004).
*/
load_error_table_number(energy, beam_number, error_num): macro = {
    call, file = "/afs/cern.ch/work/o/omcsyst/public/error_tables/Beambeam_number/error_tables_energyTeV/MBx-error_num.errors";
    readmytable, file = "/afs/cern.ch/work/o/omcsyst/public/error_tables/Beambeam_number/error_tables_energyTeV/MBx-error_num.errors",
                 table=errtab;
    seterr, table = errtab;

    call, file = "/afs/cern.ch/work/o/omcsyst/public/error_tables/Beambeam_number/MB_corr_setting_Bbeam_number_energyTeV.mad";
};


/*
* TODO: Documentation for this
* @param energy: The energy to be used.
* @param beam_number: The beam to use either 1 or 2.
*/
load_average_error_table(energy, beam_number): macro = {
    readmytable, file = "/afs/cern.ch/work/o/omcsyst/public/error_tables/Beambeam_number/MB_Bbeam_number_energyTeV.errors", table=errtab;
    seterr, table=errtab;
    call, file = "/afs/cern.ch/work/o/omcsyst/public/error_tables/Beambeam_number/MB_corr_setting_Bbeam_number_energyTeV.mad";
}

